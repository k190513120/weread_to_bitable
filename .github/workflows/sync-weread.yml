name: 微信读书同步飞书多维表格

on:
  workflow_dispatch:
    inputs:
      bitable_url:
        description: '飞书多维表格链接'
        required: true
        type: string
      personal_base_token:
        description: '飞书个人授权码'
        required: true
        type: string
      weread_cookie:
        description: '微信读书Cookie'
        required: true
        type: string
      sync_mode:
        description: '同步模式'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'single'
          - 'feishu'
  repository_dispatch:
    types: [sync-weread]

# 微信读书同步到飞书多维表格的GitHub Actions工作流

jobs:
  sync-weread:
    name: 同步微信读书到飞书多维表格
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      # 检出代码
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
      
      # 设置Node.js环境
      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      # 安装依赖
      - name: 安装依赖
        run: |
          npm ci
          echo "依赖安装完成"
      
      # 设置时区
      - name: 设置时区
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          echo "当前时间: $(date)"
      
      - name: 准备同步参数
        id: prepare-params
        run: |
          echo "=== 准备同步参数 ==="
          
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "触发方式: 手动触发 (workflow_dispatch)"
            echo "BITABLE_URL=${{ github.event.inputs.bitable_url }}"
            echo "PERSONAL_BASE_TOKEN=${{ github.event.inputs.personal_base_token }}"
            echo "WEREAD_COOKIE=${{ github.event.inputs.weread_cookie }}"
            echo "SYNC_MODE=${{ github.event.inputs.sync_mode }}"
          elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            echo "触发方式: API触发 (repository_dispatch)"
            echo "BITABLE_URL=${{ github.event.client_payload.bitable_url }}"
            echo "PERSONAL_BASE_TOKEN=${{ github.event.client_payload.personal_base_token }}"
            echo "WEREAD_COOKIE=${{ github.event.client_payload.weread_cookie }}"
            echo "SYNC_MODE=${{ github.event.client_payload.sync_mode || 'all' }}"
          fi
          
          echo "=== 调试信息 ==="
          echo "Event Name: ${{ github.event_name }}"
          echo "Repository Dispatch Type: ${{ github.event.action }}"
          
          # 显示参数（隐藏敏感信息）
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "多维表格URL: ${{ github.event.inputs.bitable_url }}"
            echo "授权码: ${{ github.event.inputs.personal_base_token }}"
            echo "Cookie: ${{ github.event.inputs.weread_cookie }}"
            echo "同步模式: ${{ github.event.inputs.sync_mode }}"
          else
            echo "多维表格URL: ${{ github.event.client_payload.bitable_url }}"
            echo "授权码: ${{ github.event.client_payload.personal_base_token }}"
            echo "Cookie: ${{ github.event.client_payload.weread_cookie }}"
            echo "同步模式: ${{ github.event.client_payload.sync_mode }}"
          fi
      
      # 验证参数
      - name: 验证参数
        run: |
          echo "=== 验证同步参数 ==="
          
          # 根据触发方式获取参数
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BITABLE_URL="${{ github.event.inputs.bitable_url }}"
            PERSONAL_BASE_TOKEN="${{ github.event.inputs.personal_base_token }}"
            WEREAD_COOKIE="${{ github.event.inputs.weread_cookie }}"
            SYNC_MODE="${{ github.event.inputs.sync_mode }}"
          else
            BITABLE_URL="${{ github.event.client_payload.bitable_url }}"
            PERSONAL_BASE_TOKEN="${{ github.event.client_payload.personal_base_token }}"
            WEREAD_COOKIE="${{ github.event.client_payload.weread_cookie }}"
            SYNC_MODE="${{ github.event.client_payload.sync_mode }}"
          fi
          
          # 验证必要参数是否存在
          if [ -z "$BITABLE_URL" ]; then
            echo "❌ 错误: 缺少飞书多维表格链接"
            exit 1
          fi
          
          if [ -z "$PERSONAL_BASE_TOKEN" ]; then
            echo "❌ 错误: 缺少飞书个人授权码"
            exit 1
          fi
          
          if [ -z "$WEREAD_COOKIE" ]; then
            echo "❌ 错误: 缺少微信读书Cookie"
            exit 1
          fi
          
          echo "✅ 所有必要参数验证通过"
          
          # 显示参数信息（隐藏敏感信息）
          echo "多维表格URL: ${BITABLE_URL:0:50}..."
          echo "授权码: ${PERSONAL_BASE_TOKEN:0:20}..."
          echo "Cookie长度: ${#WEREAD_COOKIE} 字符"
          echo "同步模式: $SYNC_MODE"
      
      # 测试飞书连接
      - name: 测试飞书连接
        run: |
          echo "=== 测试飞书多维表格连接 ==="
          
          # 根据触发方式获取参数
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BITABLE_URL="${{ github.event.inputs.bitable_url }}"
            PERSONAL_BASE_TOKEN="${{ github.event.inputs.personal_base_token }}"
            WEREAD_COOKIE="${{ github.event.inputs.weread_cookie }}"
          else
            BITABLE_URL="${{ github.event.client_payload.bitable_url }}"
            PERSONAL_BASE_TOKEN="${{ github.event.client_payload.personal_base_token }}"
            WEREAD_COOKIE="${{ github.event.client_payload.weread_cookie }}"
          fi
          
          # 使用命令行参数测试连接
          npm run test:feishu-connection -- --bitable_url "$BITABLE_URL" --personal_base_token "$PERSONAL_BASE_TOKEN" --weread_cookie "$WEREAD_COOKIE"
      
      # 执行同步任务
      - name: 执行同步任务
        id: sync-task
        run: |
          echo "=== 开始执行同步任务 ==="
          
          # 根据触发方式获取参数
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            BITABLE_URL="${{ github.event.inputs.bitable_url }}"
            PERSONAL_BASE_TOKEN="${{ github.event.inputs.personal_base_token }}"
            WEREAD_COOKIE="${{ github.event.inputs.weread_cookie }}"
            SYNC_MODE="${{ github.event.inputs.sync_mode }}"
          else
            BITABLE_URL="${{ github.event.client_payload.bitable_url }}"
            PERSONAL_BASE_TOKEN="${{ github.event.client_payload.personal_base_token }}"
            WEREAD_COOKIE="${{ github.event.client_payload.weread_cookie }}"
            SYNC_MODE="${{ github.event.client_payload.sync_mode || 'all' }}"
          fi
          
          echo "同步模式: $SYNC_MODE"
          
          # 根据同步模式执行不同的同步命令，使用命令行参数
          if [ "$SYNC_MODE" = "single" ]; then
            echo "执行单本书籍同步..."
            npm run sync:single -- --bitable_url "$BITABLE_URL" --personal_base_token "$PERSONAL_BASE_TOKEN" --weread_cookie "$WEREAD_COOKIE"
          elif [ "$SYNC_MODE" = "feishu" ]; then
            echo "执行飞书同步..."
            npm run sync:feishu -- --bitable_url "$BITABLE_URL" --personal_base_token "$PERSONAL_BASE_TOKEN" --weread_cookie "$WEREAD_COOKIE"
          else
            echo "执行全量同步..."
            npm run sync:all -- --bitable_url "$BITABLE_URL" --personal_base_token "$PERSONAL_BASE_TOKEN" --weread_cookie "$WEREAD_COOKIE"
          fi
          
          echo "同步任务完成"
      
      # 生成同步报告
      - name: 生成同步报告
        if: always()
        run: |
          echo "=== 同步任务报告 ==="
          echo "执行时间: $(date)"
          echo "触发方式: ${{ github.event_name }}"
          
          # 根据触发方式获取同步模式
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            SYNC_MODE="${{ github.event.inputs.sync_mode }}"
          else
            SYNC_MODE="${{ github.event.client_payload.sync_mode || 'all' }}"
          fi
          
          echo "同步模式: $SYNC_MODE"
          echo "任务状态: ${{ steps.sync-task.outcome }}"
          
          # 检查是否有同步日志文件
          if [ -f "sync-report.json" ]; then
            echo "同步详情:"
            cat sync-report.json
          fi
          
          echo "=== 报告结束 ==="
      
      # 上传同步日志（如果存在）
      - name: 上传同步日志
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: sync-logs-${{ github.run_number }}
          path: |
            sync-report.json
            *.log
          retention-days: 7
          if-no-files-found: ignore
      
      # 通知同步结果（可选）
      - name: 同步结果通知
        if: failure()
        run: |
          echo "同步任务失败，请检查日志"
          echo "错误时间: $(date)"
          echo "可以通过以下方式查看详细日志:"
          echo "1. 查看GitHub Actions运行日志"
          echo "2. 下载同步日志文件"
          echo "3. 检查飞书多维表格权限配置"
          echo "4. 验证微信读书Cookie是否有效"

  # 清理任务（可选）
  cleanup:
    name: 清理临时文件
    runs-on: ubuntu-latest
    needs: sync-weread
    if: always()
    
    steps:
      - name: 清理工作空间
        run: |
          echo "清理任务完成"
          echo "工作流执行结束: $(date)"